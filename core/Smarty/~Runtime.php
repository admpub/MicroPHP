<?php function strarg($str) { $tr=array(); $p=0; for ($i=1, $len=func_num_args(); $i < $len; $i++) { $arg=func_get_arg($i); if (is_array($arg)) { foreach ($arg as $a) $tr['%'.++$p]=$a; } else { $tr['%'.++$p]=$arg; } } return strtr($str, $tr); } function smarty_block_t($params, $text, &$smarty) { $text=stripslashes($text); if (isset($params['escape'])) { $escape=$params['escape']; unset($params['escape']); } if (isset($params['plural'])) { $plural=$params['plural']; unset($params['plural']); if (isset($params['count'])) { $count=$params['count']; unset($params['count']); } } if (isset($count) && isset($plural)) { $text=CoreLoader::locale(CoreLoader::$system['language']) -> ngettext($text, $plural, $count); } else { $text=CoreLoader::locale(CoreLoader::$system['language']) -> gettext($text); } if (count($params)) { $text=strarg($text, $params); } if (!isset($escape) || $escape == 'html') { $text=nl2br(htmlspecialchars($text)); } elseif (isset($escape) && ($escape == 'javascript' || $escape == 'js')) { $text=str_replace('\'', '\\\'', stripslashes($text)); } return $text; } function smarty_modifier_seo($string, $search, $delimiter, $case) { $string=iconv('UTF-8', 'ASCII//TRANSLIT', $string); $string=preg_replace('/[^a-zA-Z 0-9]+/', ' ', $string); $string=preg_replace('/[[:blank:]]+/', "$delimiter", $string); $string=ltrim($string, "$delimiter"); $string=rtrim($string, "$delimiter"); switch ($case) { case 'upper': return strtoupper($string); case 'lower': return strtolower($string); case 'first': return ucfirst($string); default: return($string); } } function smarty_function_a2z($params=array(), &$smarty) { $params['url']=!empty($params['url'])?$params['url']:'letter.php'; $params['name']=!empty($params['name'])?$params['name']:'L'; $params['active']=!empty($params['active'])?$params['active']:'A'; $links=array(); for($letter=ord('A'); $letter <= ord('Z'); ++$letter) { $alphabet=chr($letter); $active=($alphabet == $params['active'])?' class="active"':''; $links[]="<li{$active}><span><a href='{$params['url']}?{$params['name']}={$alphabet}'>{$alphabet}</a></span></li>"; } return(implode('', $links)); } function smarty_modifier_scheme($string) { if (!preg_match('#^[a-zA-Z0-9-]://#', $string)) { return '//'.$string; } return $string; } function smarty_modifier_contains($string, $find, $cases=false) { if (empty($string)) return 0; $find=preg_quote($find); $find=addcslashes($find, '/'); if ($cases) $count=preg_match_all("/\b{$find}\b/", $string, $match); else $count=preg_match_all("/\b{$find}\b/i", $string, $match); return $count; } function smarty_function_widget($params, &$template) { if (empty($params['name'])) { user_error('Widget is missing name.', E_USER_ERROR); } $widget=CoreLoader::widget($params['name'],$template->smarty); $method='execute'; $widget -> _setTpl('view.tpl'); if(!empty($params['func'])){ $method=$params['func']; $widget -> _setTpl($method.'.tpl'); } if($method{0}!='_' && method_exists($widget,$method)){ $widget -> init($params) -> $method($params); } }class Smarty_Internal_Data { public $template_class = 'Smarty_Internal_Template'; public $tpl_vars = array(); public $parent = null; public $config_vars = array(); public function assign($tpl_var, $value = null, $nocache = false) { if (is_array($tpl_var)) { foreach ($tpl_var as $_key => $_val) { if ($_key != '') { $this->tpl_vars[$_key] = new Smarty_variable($_val, $nocache); } } } else { if ($tpl_var != '') { $this->tpl_vars[$tpl_var] = new Smarty_variable($value, $nocache); } } return $this; } public function assignGlobal($varname, $value = null, $nocache = false) { if ($varname != '') { Smarty::$global_tpl_vars[$varname] = new Smarty_variable($value, $nocache); $ptr = $this; while ($ptr instanceof Smarty_Internal_Template) { $ptr->tpl_vars[$varname] = clone Smarty::$global_tpl_vars[$varname]; $ptr = $ptr->parent; } } return $this; } public function assignByRef($tpl_var, &$value, $nocache = false) { if ($tpl_var != '') { $this->tpl_vars[$tpl_var] = new Smarty_variable(null, $nocache); $this->tpl_vars[$tpl_var]->value = & $value; } return $this; } public function append($tpl_var, $value = null, $merge = false, $nocache = false) { if (is_array($tpl_var)) { foreach ($tpl_var as $_key => $_val) { if ($_key != '') { if (!isset($this->tpl_vars[$_key])) { $tpl_var_inst = $this->getVariable($_key, null, true, false); if ($tpl_var_inst instanceof Undefined_Smarty_Variable) { $this->tpl_vars[$_key] = new Smarty_variable(null, $nocache); } else { $this->tpl_vars[$_key] = clone $tpl_var_inst; } } if (!(is_array($this->tpl_vars[$_key]->value) || $this->tpl_vars[$_key]->value instanceof ArrayAccess)) { settype($this->tpl_vars[$_key]->value, 'array'); } if ($merge && is_array($_val)) { foreach ($_val as $_mkey => $_mval) { $this->tpl_vars[$_key]->value[$_mkey] = $_mval; } } else { $this->tpl_vars[$_key]->value[] = $_val; } } } } else { if ($tpl_var != '' && isset($value)) { if (!isset($this->tpl_vars[$tpl_var])) { $tpl_var_inst = $this->getVariable($tpl_var, null, true, false); if ($tpl_var_inst instanceof Undefined_Smarty_Variable) { $this->tpl_vars[$tpl_var] = new Smarty_variable(null, $nocache); } else { $this->tpl_vars[$tpl_var] = clone $tpl_var_inst; } } if (!(is_array($this->tpl_vars[$tpl_var]->value) || $this->tpl_vars[$tpl_var]->value instanceof ArrayAccess)) { settype($this->tpl_vars[$tpl_var]->value, 'array'); } if ($merge && is_array($value)) { foreach ($value as $_mkey => $_mval) { $this->tpl_vars[$tpl_var]->value[$_mkey] = $_mval; } } else { $this->tpl_vars[$tpl_var]->value[] = $value; } } } return $this; } public function appendByRef($tpl_var, &$value, $merge = false) { if ($tpl_var != '' && isset($value)) { if (!isset($this->tpl_vars[$tpl_var])) { $this->tpl_vars[$tpl_var] = new Smarty_variable(); } if (!is_array($this->tpl_vars[$tpl_var]->value)) { settype($this->tpl_vars[$tpl_var]->value, 'array'); } if ($merge && is_array($value)) { foreach ($value as $_key => $_val) { $this->tpl_vars[$tpl_var]->value[$_key] = & $value[$_key]; } } else { $this->tpl_vars[$tpl_var]->value[] = & $value; } } return $this; } public function getTemplateVars($varname = null, $_ptr = null, $search_parents = true) { if (isset($varname)) { $_var = $this->getVariable($varname, $_ptr, $search_parents, false); if (is_object($_var)) { return $_var->value; } else { return null; } } else { $_result = array(); if ($_ptr === null) { $_ptr = $this; } while ($_ptr !== null) { foreach ($_ptr->tpl_vars AS $key => $var) { if (!array_key_exists($key, $_result)) { $_result[$key] = $var->value; } } if ($search_parents) { $_ptr = $_ptr->parent; } else { $_ptr = null; } } if ($search_parents && isset(Smarty::$global_tpl_vars)) { foreach (Smarty::$global_tpl_vars AS $key => $var) { if (!array_key_exists($key, $_result)) { $_result[$key] = $var->value; } } } return $_result; } } public function clearAssign($tpl_var) { if (is_array($tpl_var)) { foreach ($tpl_var as $curr_var) { unset($this->tpl_vars[$curr_var]); } } else { unset($this->tpl_vars[$tpl_var]); } return $this; } public function clearAllAssign() { $this->tpl_vars = array(); return $this; } public function configLoad($config_file, $sections = null) { $config = new Smarty_Internal_Config($config_file, $this->smarty, $this); $config->loadConfigVars($sections); return $this; } public function getVariable($variable, $_ptr = null, $search_parents = true, $error_enable = true) { if ($_ptr === null) { $_ptr = $this; } while ($_ptr !== null) { if (isset($_ptr->tpl_vars[$variable])) { return $_ptr->tpl_vars[$variable]; } if ($search_parents) { $_ptr = $_ptr->parent; } else { $_ptr = null; } } if (isset(Smarty::$global_tpl_vars[$variable])) { return Smarty::$global_tpl_vars[$variable]; } if ($this->smarty->error_unassigned && $error_enable) { $x = $$variable; } return new Undefined_Smarty_Variable; } public function getConfigVariable($variable, $error_enable = true) { $_ptr = $this; while ($_ptr !== null) { if (isset($_ptr->config_vars[$variable])) { return $_ptr->config_vars[$variable]; } $_ptr = $_ptr->parent; } if ($this->smarty->error_unassigned && $error_enable) { $x = $$variable; } return null; } public function getStreamVariable($variable) { $_result = ''; $fp = fopen($variable, 'r+'); if ($fp) { while (!feof($fp) && ($current_line = fgets($fp)) !== false) { $_result .= $current_line; } fclose($fp); return $_result; } if ($this->smarty->error_unassigned) { throw new SmartyException('Undefined stream variable "' . $variable . '"'); } else { return null; } } public function getConfigVars($varname = null, $search_parents = true) { $_ptr = $this; $var_array = array(); while ($_ptr !== null) { if (isset($varname)) { if (isset($_ptr->config_vars[$varname])) { return $_ptr->config_vars[$varname]; } } else { $var_array = array_merge($_ptr->config_vars, $var_array); } if ($search_parents) { $_ptr = $_ptr->parent; } else { $_ptr = null; } } if (isset($varname)) { return ''; } else { return $var_array; } } public function clearConfig($varname = null) { if (isset($varname)) { unset($this->config_vars[$varname]); } else { $this->config_vars = array(); } return $this; } } class Smarty_Data extends Smarty_Internal_Data { public $smarty = null; public function __construct($_parent = null, $smarty = null) { $this->smarty = $smarty; if (is_object($_parent)) { $this->parent = $_parent; } elseif (is_array($_parent)) { foreach ($_parent as $_key => $_val) { $this->tpl_vars[$_key] = new Smarty_variable($_val); } } elseif ($_parent != null) { throw new SmartyException("Wrong type for template variables"); } } } class Smarty_Variable { public $value = null; public $nocache = false; public $scope = Smarty::SCOPE_LOCAL; public function __construct($value = null, $nocache = false, $scope = Smarty::SCOPE_LOCAL) { $this->value = $value; $this->nocache = $nocache; $this->scope = $scope; } public function __toString() { return (string) $this->value; } } class Undefined_Smarty_Variable { public function __get($name) { if ($name == 'nocache') { return false; } else { return null; } } public function __toString() { return ""; } }abstract class Smarty_Internal_TemplateBase extends Smarty_Internal_Data { public function fetch($template = null, $cache_id = null, $compile_id = null, $parent = null, $display = false, $merge_tpl_vars = true, $no_output_filter = false) { if ($template === null && $this instanceof $this->template_class) { $template = $this; } if ($cache_id !== null && is_object($cache_id)) { $parent = $cache_id; $cache_id = null; } if ($parent === null && ($this instanceof Smarty || is_string($template))) { $parent = $this; } $_template = ($template instanceof $this->template_class) ? $template : $this->smarty->createTemplate($template, $cache_id, $compile_id, $parent, false); if ($this instanceof Smarty) { $_template->caching = $this->caching; } if ($merge_tpl_vars) { $save_tpl_vars = $_template->tpl_vars; $save_config_vars = $_template->config_vars; $ptr_array = array($_template); $ptr = $_template; while (isset($ptr->parent)) { $ptr_array[] = $ptr = $ptr->parent; } $ptr_array = array_reverse($ptr_array); $parent_ptr = reset($ptr_array); $tpl_vars = $parent_ptr->tpl_vars; $config_vars = $parent_ptr->config_vars; while ($parent_ptr = next($ptr_array)) { if (!empty($parent_ptr->tpl_vars)) { $tpl_vars = array_merge($tpl_vars, $parent_ptr->tpl_vars); } if (!empty($parent_ptr->config_vars)) { $config_vars = array_merge($config_vars, $parent_ptr->config_vars); } } if (!empty(Smarty::$global_tpl_vars)) { $tpl_vars = array_merge(Smarty::$global_tpl_vars, $tpl_vars); } $_template->tpl_vars = $tpl_vars; $_template->config_vars = $config_vars; } if (!isset($_template->tpl_vars['smarty'])) { $_template->tpl_vars['smarty'] = new Smarty_Variable; } if (isset($this->smarty->error_reporting)) { $_smarty_old_error_level = error_reporting($this->smarty->error_reporting); } if (!$this->smarty->debugging && $this->smarty->debugging_ctrl == 'URL') { if (isset($_SERVER['QUERY_STRING'])) { $_query_string = $_SERVER['QUERY_STRING']; } else { $_query_string = ''; } if (false !== strpos($_query_string, $this->smarty->smarty_debug_id)) { if (false !== strpos($_query_string, $this->smarty->smarty_debug_id . '=on')) { setcookie('SMARTY_DEBUG', true); $this->smarty->debugging = true; } elseif (false !== strpos($_query_string, $this->smarty->smarty_debug_id . '=off')) { setcookie('SMARTY_DEBUG', false); $this->smarty->debugging = false; } else { $this->smarty->debugging = true; } } else { if (isset($_COOKIE['SMARTY_DEBUG'])) { $this->smarty->debugging = true; } } } $_template->smarty->merged_templates_func = array(); if ($_template->source->recompiled) { $_template->caching = false; } if (!$_template->source->exists) { if ($_template->parent instanceof Smarty_Internal_Template) { $parent_resource = " in '{$_template->parent->template_resource}'"; } else { $parent_resource = ''; } throw new SmartyException("Unable to load template {$_template->source->type} '{$_template->source->name}'{$parent_resource}"); } if (!($_template->caching == Smarty::CACHING_LIFETIME_CURRENT || $_template->caching == Smarty::CACHING_LIFETIME_SAVED) || !$_template->cached->valid) { if (!$_template->source->uncompiled) { $_smarty_tpl = $_template; if ($_template->source->recompiled) { $code = $_template->compiler->compileTemplate($_template); if ($this->smarty->debugging) { Smarty_Internal_Debug::start_render($_template); } try { ob_start(); eval('?>' . $code); unset($code); } catch (Exception $e) { ob_get_clean(); throw $e; } } else { if (!$_template->compiled->exists || ($_template->smarty->force_compile && !$_template->compiled->isCompiled)) { $_template->compileTemplateSource(); $code = file_get_contents($_template->compiled->filepath); eval('?>' . $code); unset($code); $_template->compiled->loaded = true; $_template->compiled->isCompiled = true; } if ($this->smarty->debugging) { Smarty_Internal_Debug::start_render($_template); } if (!$_template->compiled->loaded) { include($_template->compiled->filepath); if ($_template->mustCompile) { $_template->compileTemplateSource(); $code = file_get_contents($_template->compiled->filepath); eval('?>' . $code); unset($code); $_template->compiled->isCompiled = true; } $_template->compiled->loaded = true; } else { $_template->decodeProperties($_template->compiled->_properties, false); } try { ob_start(); if (empty($_template->properties['unifunc']) || !is_callable($_template->properties['unifunc'])) { throw new SmartyException("Invalid compiled template for '{$_template->template_resource}'"); } array_unshift($_template->_capture_stack, array()); $_template->properties['unifunc']($_template); if (isset($_template->_capture_stack[0][0])) { $_template->capture_error(); } array_shift($_template->_capture_stack); } catch (Exception $e) { ob_get_clean(); throw $e; } } } else { if ($_template->source->uncompiled) { if ($this->smarty->debugging) { Smarty_Internal_Debug::start_render($_template); } try { ob_start(); $_template->source->renderUncompiled($_template); } catch (Exception $e) { ob_get_clean(); throw $e; } } else { throw new SmartyException("Resource '$_template->source->type' must have 'renderUncompiled' method"); } } $_output = ob_get_clean(); if (!$_template->source->recompiled && empty($_template->properties['file_dependency'][$_template->source->uid])) { $_template->properties['file_dependency'][$_template->source->uid] = array($_template->source->filepath, $_template->source->timestamp, $_template->source->type); } if ($_template->parent instanceof Smarty_Internal_Template) { $_template->parent->properties['file_dependency'] = array_merge($_template->parent->properties['file_dependency'], $_template->properties['file_dependency']); foreach ($_template->required_plugins as $code => $tmp1) { foreach ($tmp1 as $name => $tmp) { foreach ($tmp as $type => $data) { $_template->parent->required_plugins[$code][$name][$type] = $data; } } } } if ($this->smarty->debugging) { Smarty_Internal_Debug::end_render($_template); } if (!$_template->source->recompiled && ($_template->caching == Smarty::CACHING_LIFETIME_SAVED || $_template->caching == Smarty::CACHING_LIFETIME_CURRENT)) { if ($this->smarty->debugging) { Smarty_Internal_Debug::start_cache($_template); } $_template->properties['has_nocache_code'] = false; $cache_split = preg_split("!/\*%%SmartyNocache:{$_template->properties['nocache_hash']}%%\*\/(.+?)/\*/%%SmartyNocache:{$_template->properties['nocache_hash']}%%\*/!s", $_output); preg_match_all("!/\*%%SmartyNocache:{$_template->properties['nocache_hash']}%%\*\/(.+?)/\*/%%SmartyNocache:{$_template->properties['nocache_hash']}%%\*/!s", $_output, $cache_parts); $output = ''; foreach ($cache_split as $curr_idx => $curr_split) { $output .= preg_replace('/(<%|%>|<\?php|<\?|\?>)/', "<?php echo '\$1'; ?>\n", $curr_split); if (isset($cache_parts[0][$curr_idx])) { $_template->properties['has_nocache_code'] = true; $output .= preg_replace("!/\*/?%%SmartyNocache:{$_template->properties['nocache_hash']}%%\*/!", '', $cache_parts[0][$curr_idx]); } } if (!$no_output_filter && !$_template->has_nocache_code && (isset($this->smarty->autoload_filters['output']) || isset($this->smarty->registered_filters['output']))) { $output = Smarty_Internal_Filter_Handler::runFilter('output', $output, $_template); } $_smarty_tpl = $_template; try { ob_start(); eval('?>' . $output); $_output = ob_get_clean(); } catch (Exception $e) { ob_get_clean(); throw $e; } $_template->writeCachedContent($output); if ($this->smarty->debugging) { Smarty_Internal_Debug::end_cache($_template); } } else { if (!empty($_template->properties['nocache_hash']) && !empty($_template->parent->properties['nocache_hash'])) { $_output = str_replace("{$_template->properties['nocache_hash']}", $_template->parent->properties['nocache_hash'], $_output); $_template->parent->has_nocache_code = $_template->parent->has_nocache_code || $_template->has_nocache_code; } } } else { if ($this->smarty->debugging) { Smarty_Internal_Debug::start_cache($_template); } try { ob_start(); array_unshift($_template->_capture_stack, array()); $_template->properties['unifunc']($_template); if (isset($_template->_capture_stack[0][0])) { $_template->capture_error(); } array_shift($_template->_capture_stack); $_output = ob_get_clean(); } catch (Exception $e) { ob_get_clean(); throw $e; } if ($this->smarty->debugging) { Smarty_Internal_Debug::end_cache($_template); } } if ((!$this->caching || $_template->has_nocache_code || $_template->source->recompiled) && !$no_output_filter && (isset($this->smarty->autoload_filters['output']) || isset($this->smarty->registered_filters['output']))) { $_output = Smarty_Internal_Filter_Handler::runFilter('output', $_output, $_template); } if (isset($this->error_reporting)) { error_reporting($_smarty_old_error_level); } if ($display) { if ($this->caching && $this->cache_modified_check) { $_isCached = $_template->isCached() && !$_template->has_nocache_code; $_last_modified_date = @substr($_SERVER['HTTP_IF_MODIFIED_SINCE'], 0, strpos($_SERVER['HTTP_IF_MODIFIED_SINCE'], 'GMT') + 3); if ($_isCached && $_template->cached->timestamp <= strtotime($_last_modified_date)) { switch (PHP_SAPI) { case 'cgi': case 'cgi-fcgi': case 'fpm-fcgi': header('Status: 304 Not Modified'); break; case 'cli': if ( !empty($_SERVER['SMARTY_PHPUNIT_DISABLE_HEADERS']) ) { $_SERVER['SMARTY_PHPUNIT_HEADERS'][] = '304 Not Modified'; } break; default: header($_SERVER['SERVER_PROTOCOL'] . ' 304 Not Modified'); break; } } else { switch (PHP_SAPI) { case 'cli': if ( !empty($_SERVER['SMARTY_PHPUNIT_DISABLE_HEADERS']) ) { $_SERVER['SMARTY_PHPUNIT_HEADERS'][] = 'Last-Modified: ' . gmdate('D, d M Y H:i:s', $_template->cached->timestamp) . ' GMT'; } break; default: header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $_template->cached->timestamp) . ' GMT'); break; } echo $_output; } } else { echo $_output; } if ($this->smarty->debugging) { Smarty_Internal_Debug::display_debug($_template); } if ($merge_tpl_vars) { $_template->tpl_vars = $save_tpl_vars; $_template->config_vars = $save_config_vars; } return; } else { if ($merge_tpl_vars) { $_template->tpl_vars = $save_tpl_vars; $_template->config_vars = $save_config_vars; } return $_output; } } public function display($template = null, $cache_id = null, $compile_id = null, $parent = null) { $this->fetch($template, $cache_id, $compile_id, $parent, true); } public function isCached($template = null, $cache_id = null, $compile_id = null, $parent = null) { if ($template === null && $this instanceof $this->template_class) { return $this->cached->valid; } if (!($template instanceof $this->template_class)) { if ($parent === null) { $parent = $this; } $template = $this->smarty->createTemplate($template, $cache_id, $compile_id, $parent, false); } return $template->cached->valid; } public function createData($parent = null) { return new Smarty_Data($parent, $this); } public function registerPlugin($type, $tag, $callback, $cacheable = true, $cache_attr = null) { if (isset($this->smarty->registered_plugins[$type][$tag])) { throw new SmartyException("Plugin tag \"{$tag}\" already registered"); } elseif (!is_callable($callback)) { throw new SmartyException("Plugin \"{$tag}\" not callable"); } else { $this->smarty->registered_plugins[$type][$tag] = array($callback, (bool) $cacheable, (array) $cache_attr); } return $this; } public function unregisterPlugin($type, $tag) { if (isset($this->smarty->registered_plugins[$type][$tag])) { unset($this->smarty->registered_plugins[$type][$tag]); } return $this; } public function registerResource($type, $callback) { $this->smarty->registered_resources[$type] = $callback instanceof Smarty_Resource ? $callback : array($callback, false); return $this; } public function unregisterResource($type) { if (isset($this->smarty->registered_resources[$type])) { unset($this->smarty->registered_resources[$type]); } return $this; } public function registerCacheResource($type, Smarty_CacheResource $callback) { $this->smarty->registered_cache_resources[$type] = $callback; return $this; } public function unregisterCacheResource($type) { if (isset($this->smarty->registered_cache_resources[$type])) { unset($this->smarty->registered_cache_resources[$type]); } return $this; } public function registerObject($object_name, $object_impl, $allowed = array(), $smarty_args = true, $block_methods = array()) { if (!empty($allowed)) { foreach ((array) $allowed as $method) { if (!is_callable(array($object_impl, $method)) && !property_exists($object_impl, $method)) { throw new SmartyException("Undefined method or property '$method' in registered object"); } } } if (!empty($block_methods)) { foreach ((array) $block_methods as $method) { if (!is_callable(array($object_impl, $method))) { throw new SmartyException("Undefined method '$method' in registered object"); } } } $this->smarty->registered_objects[$object_name] = array($object_impl, (array) $allowed, (boolean) $smarty_args, (array) $block_methods); return $this; } public function getRegisteredObject($name) { if (!isset($this->smarty->registered_objects[$name])) { throw new SmartyException("'$name' is not a registered object"); } if (!is_object($this->smarty->registered_objects[$name][0])) { throw new SmartyException("registered '$name' is not an object"); } return $this->smarty->registered_objects[$name][0]; } public function unregisterObject($name) { if (isset($this->smarty->registered_objects[$name])) { unset($this->smarty->registered_objects[$name]); } return $this; } public function registerClass($class_name, $class_impl) { if (!class_exists($class_impl)) { throw new SmartyException("Undefined class '$class_impl' in register template class"); } $this->smarty->registered_classes[$class_name] = $class_impl; return $this; } public function registerDefaultPluginHandler($callback) { if (is_callable($callback)) { $this->smarty->default_plugin_handler_func = $callback; } else { throw new SmartyException("Default plugin handler '$callback' not callable"); } return $this; } public function registerDefaultTemplateHandler($callback) { if (is_callable($callback)) { $this->smarty->default_template_handler_func = $callback; } else { throw new SmartyException("Default template handler '$callback' not callable"); } return $this; } public function registerDefaultConfigHandler($callback) { if (is_callable($callback)) { $this->smarty->default_config_handler_func = $callback; } else { throw new SmartyException("Default config handler '$callback' not callable"); } return $this; } public function registerFilter($type, $callback) { $this->smarty->registered_filters[$type][$this->_get_filter_name($callback)] = $callback; return $this; } public function unregisterFilter($type, $callback) { $name = $this->_get_filter_name($callback); if (isset($this->smarty->registered_filters[$type][$name])) { unset($this->smarty->registered_filters[$type][$name]); } return $this; } public function _get_filter_name($function_name) { if (is_array($function_name)) { $_class_name = (is_object($function_name[0]) ? get_class($function_name[0]) : $function_name[0]); return $_class_name . '_' . $function_name[1]; } else { return $function_name; } } public function loadFilter($type, $name) { $_plugin = "smarty_{$type}filter_{$name}"; $_filter_name = $_plugin; if ($this->smarty->loadPlugin($_plugin)) { if (class_exists($_plugin, false)) { $_plugin = array($_plugin, 'execute'); } if (is_callable($_plugin)) { $this->smarty->registered_filters[$type][$_filter_name] = $_plugin; return true; } } throw new SmartyException("{$type}filter \"{$name}\" not callable"); } public function unloadFilter($type, $name) { $_filter_name = "smarty_{$type}filter_{$name}"; if (isset($this->smarty->registered_filters[$type][$_filter_name])) { unset ($this->smarty->registered_filters[$type][$_filter_name]); } return $this; } private function replaceCamelcase($match) { return '_' . strtolower($match[1]); } public function __call($name, $args) { static $_prefixes = array('set' => true, 'get' => true); static $_resolved_property_name = array(); static $_resolved_property_source = array(); if (method_exists($this->smarty, $name)) { return call_user_func_array(array($this->smarty, $name), $args); } $first3 = strtolower(substr($name, 0, 3)); if (isset($_prefixes[$first3]) && isset($name[3]) && $name[3] !== '_') { if (isset($_resolved_property_name[$name])) { $property_name = $_resolved_property_name[$name]; } else { $property_name = strtolower(substr($name, 3, 1)) . substr($name, 4); $property_name = preg_replace_callback('/([A-Z])/', array($this, 'replaceCamelcase'), $property_name); $_resolved_property_name[$name] = $property_name; } if (isset($_resolved_property_source[$property_name])) { $_is_this = $_resolved_property_source[$property_name]; } else { $_is_this = null; if (property_exists($this, $property_name)) { $_is_this = true; } elseif (property_exists($this->smarty, $property_name)) { $_is_this = false; } $_resolved_property_source[$property_name] = $_is_this; } if ($_is_this) { if ($first3 == 'get') { return $this->$property_name; } else { return $this->$property_name = $args[0]; } } elseif ($_is_this === false) { if ($first3 == 'get') { return $this->smarty->$property_name; } else { return $this->smarty->$property_name = $args[0]; } } else { throw new SmartyException("property '$property_name' does not exist."); } } if ($name == 'Smarty') { throw new SmartyException("PHP5 requires you to call __construct() instead of Smarty()"); } throw new SmartyException("Call of unknown method '$name'."); } }class Smarty_Internal_Template extends Smarty_Internal_TemplateBase { public $cache_id = null; public $compile_id = null; public $caching = null; public $cache_lifetime = null; public $template_resource = null; public $mustCompile = null; public $has_nocache_code = false; public $properties = array('file_dependency' => array(), 'nocache_hash' => '', 'function' => array()); public $required_plugins = array('compiled' => array(), 'nocache' => array()); public $smarty = null; public $block_data = array(); public $variable_filters = array(); public $used_tags = array(); public $allow_relative_path = false; public $_capture_stack = array(0 => array()); public function __construct($template_resource, $smarty, $_parent = null, $_cache_id = null, $_compile_id = null, $_caching = null, $_cache_lifetime = null) { $this->smarty = & $smarty; $this->cache_id = $_cache_id === null ? $this->smarty->cache_id : $_cache_id; $this->compile_id = $_compile_id === null ? $this->smarty->compile_id : $_compile_id; $this->caching = $_caching === null ? $this->smarty->caching : $_caching; if ($this->caching === true) { $this->caching = Smarty::CACHING_LIFETIME_CURRENT; } $this->cache_lifetime = $_cache_lifetime === null ? $this->smarty->cache_lifetime : $_cache_lifetime; $this->parent = $_parent; $this->template_resource = $template_resource; if ($this->parent instanceof Smarty_Internal_Template) { $this->block_data = $this->parent->block_data; } } public function mustCompile() { if (!$this->source->exists) { if ($this->parent instanceof Smarty_Internal_Template) { $parent_resource = " in '$this->parent->template_resource}'"; } else { $parent_resource = ''; } throw new SmartyException("Unable to load template {$this->source->type} '{$this->source->name}'{$parent_resource}"); } if ($this->mustCompile === null) { $this->mustCompile = (!$this->source->uncompiled && ($this->smarty->force_compile || $this->source->recompiled || $this->compiled->timestamp === false || ($this->smarty->compile_check && $this->compiled->timestamp < $this->source->timestamp))); } return $this->mustCompile; } public function compileTemplateSource() { if (!$this->source->recompiled) { $this->properties['file_dependency'] = array(); if ($this->source->components) { } else { $this->properties['file_dependency'][$this->source->uid] = array($this->source->filepath, $this->source->timestamp, $this->source->type); } } if ($this->smarty->compile_locking && !$this->source->recompiled) { if ($saved_timestamp = $this->compiled->timestamp) { touch($this->compiled->filepath); } } try { $code = $this->compiler->compileTemplate($this); } catch (Exception $e) { if ($this->smarty->compile_locking && !$this->source->recompiled && $saved_timestamp) { touch($this->compiled->filepath, $saved_timestamp); } throw $e; } if (!$this->source->recompiled && $this->compiler->write_compiled_code) { $_filepath = $this->compiled->filepath; if ($_filepath === false) { throw new SmartyException('getCompiledFilepath() did not return a destination to save the compiled template to'); } Smarty_Internal_Write_File::writeFile($_filepath, $code, $this->smarty); $this->compiled->exists = true; $this->compiled->isCompiled = true; } unset($this->compiler); } public function writeCachedContent($content) { if ($this->source->recompiled || !($this->caching == Smarty::CACHING_LIFETIME_CURRENT || $this->caching == Smarty::CACHING_LIFETIME_SAVED)) { return false; } $this->properties['cache_lifetime'] = $this->cache_lifetime; $this->properties['unifunc'] = 'content_' . str_replace(array('.', ','), '_', uniqid('', true)); $content = $this->createTemplateCodeFrame($content, true); $_smarty_tpl = $this; eval("?>" . $content); $this->cached->valid = true; $this->cached->processed = true; return $this->cached->write($this, $content); } public function getSubTemplate($template, $cache_id, $compile_id, $caching, $cache_lifetime, $data, $parent_scope) { if ($this->smarty->allow_ambiguous_resources) { $_templateId = Smarty_Resource::getUniqueTemplateName($this, $template) . $cache_id . $compile_id; } else { $_templateId = $this->smarty->joined_template_dir . '#' . $template . $cache_id . $compile_id; } if (isset($_templateId[150])) { $_templateId = sha1($_templateId); } if (isset($this->smarty->template_objects[$_templateId])) { $tpl = clone $this->smarty->template_objects[$_templateId]; $tpl->parent = $this; $tpl->caching = $caching; $tpl->cache_lifetime = $cache_lifetime; } else { $tpl = new $this->smarty->template_class($template, $this->smarty, $this, $cache_id, $compile_id, $caching, $cache_lifetime); } if ($parent_scope == Smarty::SCOPE_LOCAL) { $tpl->tpl_vars = $this->tpl_vars; $tpl->tpl_vars['smarty'] = clone $this->tpl_vars['smarty']; } elseif ($parent_scope == Smarty::SCOPE_PARENT) { $tpl->tpl_vars = & $this->tpl_vars; } elseif ($parent_scope == Smarty::SCOPE_GLOBAL) { $tpl->tpl_vars = & Smarty::$global_tpl_vars; } elseif (($scope_ptr = $this->getScopePointer($parent_scope)) == null) { $tpl->tpl_vars = & $this->tpl_vars; } else { $tpl->tpl_vars = & $scope_ptr->tpl_vars; } $tpl->config_vars = $this->config_vars; if (!empty($data)) { foreach ($data as $_key => $_val) { $tpl->tpl_vars[$_key] = new Smarty_variable($_val); } } return $tpl->fetch(null, null, null, null, false, false, true); } public function setupInlineSubTemplate($template, $cache_id, $compile_id, $caching, $cache_lifetime, $data, $parent_scope, $hash) { $tpl = new $this->smarty->template_class($template, $this->smarty, $this, $cache_id, $compile_id, $caching, $cache_lifetime); $tpl->properties['nocache_hash'] = $hash; if ($parent_scope == Smarty::SCOPE_LOCAL) { $tpl->tpl_vars = $this->tpl_vars; $tpl->tpl_vars['smarty'] = clone $this->tpl_vars['smarty']; } elseif ($parent_scope == Smarty::SCOPE_PARENT) { $tpl->tpl_vars = & $this->tpl_vars; } elseif ($parent_scope == Smarty::SCOPE_GLOBAL) { $tpl->tpl_vars = & Smarty::$global_tpl_vars; } elseif (($scope_ptr = $this->getScopePointer($parent_scope)) == null) { $tpl->tpl_vars = & $this->tpl_vars; } else { $tpl->tpl_vars = & $scope_ptr->tpl_vars; } $tpl->config_vars = $this->config_vars; if (!empty($data)) { foreach ($data as $_key => $_val) { $tpl->tpl_vars[$_key] = new Smarty_variable($_val); } } return $tpl; } public function createTemplateCodeFrame($content = '', $cache = false) { $plugins_string = ''; if (!$cache) { if (!empty($this->required_plugins['compiled'])) { $plugins_string = '<?php '; foreach ($this->required_plugins['compiled'] as $tmp) { foreach ($tmp as $data) { $file = addslashes($data['file']); if (is_Array($data['function'])) { $plugins_string .= "if (!is_callable(array('{$data['function'][0]}','{$data['function'][1]}'))) include '{$file}';\n"; } else { $plugins_string .= "if (!is_callable('{$data['function']}')) include '{$file}';\n"; } } } $plugins_string .= '?>'; } if (!empty($this->required_plugins['nocache'])) { $this->has_nocache_code = true; $plugins_string .= "<?php echo '/*%%SmartyNocache:{$this->properties['nocache_hash']}%%*/<?php \$_smarty = \$_smarty_tpl->smarty; "; foreach ($this->required_plugins['nocache'] as $tmp) { foreach ($tmp as $data) { $file = addslashes($data['file']); if (is_Array($data['function'])) { $plugins_string .= addslashes("if (!is_callable(array('{$data['function'][0]}','{$data['function'][1]}'))) include '{$file}';\n"); } else { $plugins_string .= addslashes("if (!is_callable('{$data['function']}')) include '{$file}';\n"); } } } $plugins_string .= "?>/*/%%SmartyNocache:{$this->properties['nocache_hash']}%%*/';?>\n"; } } $this->properties['has_nocache_code'] = $this->has_nocache_code; $output = ''; if (!$this->source->recompiled) { $output = "<?php /*%%SmartyHeaderCode:{$this->properties['nocache_hash']}%%*/"; if ($this->smarty->direct_access_security) { $output .= "if(!defined('SMARTY_DIR')) exit('no direct access allowed');\n"; } } if ($cache) { unset($this->properties['function']); if (!empty($this->smarty->template_functions)) { foreach ($this->smarty->template_functions as $name => $function_data) { if (isset($function_data['called_nocache'])) { foreach ($function_data['called_functions'] as $func_name) { $this->smarty->template_functions[$func_name]['called_nocache'] = true; } } } foreach ($this->smarty->template_functions as $name => $function_data) { if (isset($function_data['called_nocache'])) { unset($function_data['called_nocache'], $function_data['called_functions'], $this->smarty->template_functions[$name]['called_nocache']); $this->properties['function'][$name] = $function_data; } } } } $this->properties['version'] = Smarty::SMARTY_VERSION; if (!isset($this->properties['unifunc'])) { $this->properties['unifunc'] = 'content_' . str_replace(array('.', ','), '_', uniqid('', true)); } if (!$this->source->recompiled) { $output .= "\$_valid = \$_smarty_tpl->decodeProperties(" . var_export($this->properties, true) . ',' . ($cache ? 'true' : 'false') . "); /*/%%SmartyHeaderCode%%*/?>\n"; $output .= '<?php if ($_valid && !is_callable(\'' . $this->properties['unifunc'] . '\')) {function ' . $this->properties['unifunc'] . '($_smarty_tpl) {?>'; } $output .= $plugins_string; $output .= $content; if (!$this->source->recompiled) { $output .= "<?php }} ?>\n"; } return $output; } public function decodeProperties($properties, $cache = false) { $this->has_nocache_code = $properties['has_nocache_code']; $this->properties['nocache_hash'] = $properties['nocache_hash']; if (isset($properties['cache_lifetime'])) { $this->properties['cache_lifetime'] = $properties['cache_lifetime']; } if (isset($properties['file_dependency'])) { $this->properties['file_dependency'] = array_merge($this->properties['file_dependency'], $properties['file_dependency']); } if (!empty($properties['function'])) { $this->properties['function'] = array_merge($this->properties['function'], $properties['function']); $this->smarty->template_functions = array_merge($this->smarty->template_functions, $properties['function']); } $this->properties['version'] = (isset($properties['version'])) ? $properties['version'] : ''; $this->properties['unifunc'] = $properties['unifunc']; $is_valid = true; if ($this->properties['version'] != Smarty::SMARTY_VERSION) { $is_valid = false; } elseif (((!$cache && $this->smarty->compile_check && empty($this->compiled->_properties) && !$this->compiled->isCompiled) || $cache && ($this->smarty->compile_check === true || $this->smarty->compile_check === Smarty::COMPILECHECK_ON)) && !empty($this->properties['file_dependency'])) { foreach ($this->properties['file_dependency'] as $_file_to_check) { if ($_file_to_check[2] == 'file' || $_file_to_check[2] == 'php') { if ($this->source->filepath == $_file_to_check[0] && isset($this->source->timestamp)) { $mtime = $this->source->timestamp; } else { $mtime = file_exists($_file_to_check[0]) ? filemtime($_file_to_check[0]): 0; } } elseif ($_file_to_check[2] == 'string') { continue; } else { $source = Smarty_Resource::source(null, $this->smarty, $_file_to_check[0]); $mtime = $source->timestamp; } if (!$mtime || $mtime > $_file_to_check[1]) { $is_valid = false; break; } } } if ($cache) { if ($this->caching === Smarty::CACHING_LIFETIME_SAVED && $this->properties['cache_lifetime'] >= 0 && (time() > ($this->cached->timestamp + $this->properties['cache_lifetime'])) ) { $is_valid = false; } $this->cached->valid = $is_valid; } else { $this->mustCompile = !$is_valid; } if (!$cache) { $this->compiled->_properties = $properties; } return $is_valid; } public function createLocalArrayVariable($tpl_var, $nocache = false, $scope = Smarty::SCOPE_LOCAL) { if (!isset($this->tpl_vars[$tpl_var])) { $this->tpl_vars[$tpl_var] = new Smarty_variable(array(), $nocache, $scope); } else { $this->tpl_vars[$tpl_var] = clone $this->tpl_vars[$tpl_var]; if ($scope != Smarty::SCOPE_LOCAL) { $this->tpl_vars[$tpl_var]->scope = $scope; } if (!(is_array($this->tpl_vars[$tpl_var]->value) || $this->tpl_vars[$tpl_var]->value instanceof ArrayAccess)) { settype($this->tpl_vars[$tpl_var]->value, 'array'); } } } public function &getScope($scope) { if ($scope == Smarty::SCOPE_PARENT && !empty($this->parent)) { return $this->parent->tpl_vars; } elseif ($scope == Smarty::SCOPE_ROOT && !empty($this->parent)) { $ptr = $this->parent; while (!empty($ptr->parent)) { $ptr = $ptr->parent; } return $ptr->tpl_vars; } elseif ($scope == Smarty::SCOPE_GLOBAL) { return Smarty::$global_tpl_vars; } $null = null; return $null; } public function getScopePointer($scope) { if ($scope == Smarty::SCOPE_PARENT && !empty($this->parent)) { return $this->parent; } elseif ($scope == Smarty::SCOPE_ROOT && !empty($this->parent)) { $ptr = $this->parent; while (!empty($ptr->parent)) { $ptr = $ptr->parent; } return $ptr; } return null; } public function _count($value) { if (is_array($value) === true || $value instanceof Countable) { return count($value); } elseif ($value instanceof IteratorAggregate) { return iterator_count($value->getIterator()); } elseif ($value instanceof Iterator) { return iterator_count($value); } elseif ($value instanceof PDOStatement) { return $value->rowCount(); } elseif ($value instanceof Traversable) { return iterator_count($value); } elseif ($value instanceof ArrayAccess) { if ($value->offsetExists(0)) { return 1; } } elseif (is_object($value)) { return count($value); } return 0; } public function capture_error() { throw new SmartyException("Not matching {capture} open/close in \"{$this->template_resource}\""); } public function clearCache($exp_time = null) { Smarty_CacheResource::invalidLoadedCache($this->smarty); return $this->cached->handler->clear($this->smarty, $this->template_name, $this->cache_id, $this->compile_id, $exp_time); } public function __set($property_name, $value) { switch ($property_name) { case 'source': case 'compiled': case 'cached': case 'compiler': $this->$property_name = $value; return; default: if (property_exists($this->smarty, $property_name)) { $this->smarty->$property_name = $value; return; } } throw new SmartyException("invalid template property '$property_name'."); } public function __get($property_name) { switch ($property_name) { case 'source': if (strlen($this->template_resource) == 0) { throw new SmartyException('Missing template name'); } $this->source = Smarty_Resource::source($this); if ($this->source->type != 'eval') { if ($this->smarty->allow_ambiguous_resources) { $_templateId = $this->source->unique_resource . $this->cache_id . $this->compile_id; } else { $_templateId = $this->smarty->joined_template_dir . '#' . $this->template_resource . $this->cache_id . $this->compile_id; } if (isset($_templateId[150])) { $_templateId = sha1($_templateId); } $this->smarty->template_objects[$_templateId] = $this; } return $this->source; case 'compiled': $this->compiled = $this->source->getCompiled($this); return $this->compiled; case 'cached': if (!class_exists('Smarty_Template_Cached')) { include SMARTY_SYSPLUGINS_DIR . 'smarty_cacheresource.php'; } $this->cached = new Smarty_Template_Cached($this); return $this->cached; case 'compiler': $this->smarty->loadPlugin($this->source->compiler_class); $this->compiler = new $this->source->compiler_class($this->source->template_lexer_class, $this->source->template_parser_class, $this->smarty); return $this->compiler; default: if (property_exists($this->smarty, $property_name)) { return $this->smarty->$property_name; } } throw new SmartyException("template property '$property_name' does not exist."); } public function __destruct() { if ($this->smarty->cache_locking && isset($this->cached) && $this->cached->is_locked) { $this->cached->handler->releaseLock($this->smarty, $this->cached); } } }abstract class Smarty_Resource { public static $sources = array(); public static $compileds = array(); public static $resources = array(); protected static $sysplugins = array( 'file' => true, 'string' => true, 'extends' => true, 'stream' => true, 'eval' => true, 'php' => true ); public $compiler_class = 'Smarty_Internal_SmartyTemplateCompiler'; public $template_lexer_class = 'Smarty_Internal_Templatelexer'; public $template_parser_class = 'Smarty_Internal_Templateparser'; abstract public function getContent(Smarty_Template_Source $source); abstract public function populate(Smarty_Template_Source $source, Smarty_Internal_Template $_template = null); public function populateTimestamp(Smarty_Template_Source $source) { } protected function buildUniqueResourceName(Smarty $smarty, $resource_name, $is_config = false) { if ($is_config) { return get_class($this) . '#' . $smarty->joined_config_dir . '#' . $resource_name; } else { return get_class($this) . '#' . $smarty->joined_template_dir . '#' . $resource_name; } } public function populateCompiledFilepath(Smarty_Template_Compiled $compiled, Smarty_Internal_Template $_template) { $_compile_id = isset($_template->compile_id) ? preg_replace('![^\w\|]+!', '_', $_template->compile_id) : null; $_filepath = $compiled->source->uid; if ($_template->smarty->use_sub_dirs) { $_filepath = substr($_filepath, 0, 2) . DS . substr($_filepath, 2, 2) . DS . substr($_filepath, 4, 2) . DS . $_filepath; } $_compile_dir_sep = $_template->smarty->use_sub_dirs ? DS : '^'; if (isset($_compile_id)) { $_filepath = $_compile_id . $_compile_dir_sep . $_filepath; } if ($_template->caching) { $_cache = '.cache'; } else { $_cache = ''; } $_compile_dir = $_template->smarty->getCompileDir(); $_basename = $this->getBasename($compiled->source); if ($_basename === null) { $_basename = basename(preg_replace('![^\w\/]+!', '_', $compiled->source->name)); } if ($_basename) { $_basename = '.' . $_basename; } $compiled->filepath = $_compile_dir . $_filepath . '.' . $compiled->source->type . $_basename . $_cache . '.php'; } protected function normalizePath($_path, $ds = true) { if ($ds) { $_path = str_replace('\\', '/', $_path); } $offset = 0; $_path = preg_replace('#/\./(\./)*#', '/', $_path); while (true) { $_parent = strpos($_path, '/../', $offset); if (!$_parent) { break; } elseif ($_path[$_parent - 1] === '.') { $offset = $_parent + 3; continue; } $_pos = strrpos($_path, '/', $_parent - strlen($_path) - 1); if ($_pos === false) { $_pos = $_parent; } $_path = substr_replace($_path, '', $_pos, $_parent + 3 - $_pos); } if ($ds && DS != '/') { $_path = str_replace('/', '\\', $_path); } return $_path; } protected function buildFilepath(Smarty_Template_Source $source, Smarty_Internal_Template $_template = null) { $file = $source->name; if ($source instanceof Smarty_Config_Source) { $_directories = $source->smarty->getConfigDir(); $_default_handler = $source->smarty->default_config_handler_func; } else { $_directories = $source->smarty->getTemplateDir(); $_default_handler = $source->smarty->default_template_handler_func; } $_file_is_dotted = $file[0] == '.' && ($file[1] == '.' || $file[1] == '/' || $file[1] == "\\"); if ($_template && $_template->parent instanceof Smarty_Internal_Template && $_file_is_dotted) { if ($_template->parent->source->type != 'file' && $_template->parent->source->type != 'extends' && !$_template->parent->allow_relative_path) { throw new SmartyException("Template '{$file}' cannot be relative to template of resource type '{$_template->parent->source->type}'"); } $file = dirname($_template->parent->source->filepath) . DS . $file; $_file_exact_match = true; if (!preg_match('/^([\/\\\\]|[a-zA-Z]:[\/\\\\])/', $file)) { $file = getcwd() . DS . $file; } } if (!preg_match('/^([\/\\\\]|[a-zA-Z]:[\/\\\\])/', $file)) { $_path = DS . trim($file, '/'); $_was_relative = true; } else { $_path = str_replace('\\', '/', $file); } $_path = $this->normalizePath($_path, false); if (DS != '/') { $_path = str_replace('/', '\\', $_path); } if (isset($_was_relative)) { $_path = substr($_path, 1); } $file = rtrim($_path, '/\\'); if (isset($_file_exact_match)) { return $this->fileExists($source, $file) ? $file : false; } if (preg_match('#^\[(?P<key>[^\]]+)\](?P<file>.+)$#', $file, $match)) { $_directory = null; if (isset($_directories[$match['key']])) { $_directory = $_directories[$match['key']]; } elseif (is_numeric($match['key'])) { $match['key'] = (int) $match['key']; if (isset($_directories[$match['key']])) { $_directory = $_directories[$match['key']]; } else { $keys = array_keys($_directories); $_directory = $_directories[$keys[$match['key']]]; } } if ($_directory) { $_file = substr($file, strpos($file, ']') + 1); $_filepath = $_directory . $_file; if ($this->fileExists($source, $_filepath)) { return $_filepath; } } } $_stream_resolve_include_path = function_exists('stream_resolve_include_path'); if (!preg_match('/^([\/\\\\]|[a-zA-Z]:[\/\\\\])/', $file)) { foreach ($_directories as $_directory) { $_filepath = $_directory . $file; if ($this->fileExists($source, $_filepath)) { return $this->normalizePath($_filepath); } if ($source->smarty->use_include_path && !preg_match('/^([\/\\\\]|[a-zA-Z]:[\/\\\\])/', $_directory)) { if ($_stream_resolve_include_path) { $_filepath = stream_resolve_include_path($_filepath); } else { $_filepath = Smarty_Internal_Get_Include_Path::getIncludePath($_filepath); } if ($_filepath !== false) { if ($this->fileExists($source, $_filepath)) { return $this->normalizePath($_filepath); } } } } } if ($this->fileExists($source, $file)) { return $file; } if ($_default_handler) { if (!is_callable($_default_handler)) { if ($source instanceof Smarty_Config_Source) { throw new SmartyException("Default config handler not callable"); } else { throw new SmartyException("Default template handler not callable"); } } $_return = call_user_func_array($_default_handler, array($source->type, $source->name, &$_content, &$_timestamp, $source->smarty)); if (is_string($_return)) { $source->timestamp = file_exists($_return) ? filemtime($_return) : 0; $source->exists = !!$source->timestamp; return $_return; } elseif ($_return === true) { $source->content = $_content; $source->timestamp = $_timestamp; $source->exists = true; return $_filepath; } } return false; } protected function fileExists(Smarty_Template_Source $source, $file) { $source->timestamp = is_file($file) ? filemtime($file) : false; return $source->exists = !!$source->timestamp; } protected function getBasename(Smarty_Template_Source $source) { return null; } public static function load(Smarty $smarty, $type) { if (isset($smarty->_resource_handlers[$type])) { return $smarty->_resource_handlers[$type]; } if (isset($smarty->registered_resources[$type])) { if ($smarty->registered_resources[$type] instanceof Smarty_Resource) { $smarty->_resource_handlers[$type] = $smarty->registered_resources[$type]; return $smarty->_resource_handlers[$type]; } if (!isset(self::$resources['registered'])) { self::$resources['registered'] = new Smarty_Internal_Resource_Registered(); } if (!isset($smarty->_resource_handlers[$type])) { $smarty->_resource_handlers[$type] = self::$resources['registered']; } return $smarty->_resource_handlers[$type]; } if (isset(self::$sysplugins[$type])) { if (!isset(self::$resources[$type])) { $_resource_class = 'Smarty_Internal_Resource_' . ucfirst($type); self::$resources[$type] = new $_resource_class(); } return $smarty->_resource_handlers[$type] = self::$resources[$type]; } $_resource_class = 'Smarty_Resource_' . ucfirst($type); if ($smarty->loadPlugin($_resource_class)) { if (isset(self::$resources[$type])) { return $smarty->_resource_handlers[$type] = self::$resources[$type]; } if (class_exists($_resource_class, false)) { self::$resources[$type] = new $_resource_class(); return $smarty->_resource_handlers[$type] = self::$resources[$type]; } else { $smarty->registerResource($type, array( "smarty_resource_{$type}_source", "smarty_resource_{$type}_timestamp", "smarty_resource_{$type}_secure", "smarty_resource_{$type}_trusted" )); return self::load($smarty, $type); } } $_known_stream = stream_get_wrappers(); if (in_array($type, $_known_stream)) { if (is_object($smarty->security_policy)) { $smarty->security_policy->isTrustedStream($type); } if (!isset(self::$resources['stream'])) { self::$resources['stream'] = new Smarty_Internal_Resource_Stream(); } return $smarty->_resource_handlers[$type] = self::$resources['stream']; } throw new SmartyException("Unknown resource type '{$type}'"); } protected static function parseResourceName($resource_name, $default_resource, &$name, &$type) { $parts = explode(':', $resource_name, 2); if (!isset($parts[1]) || !isset($parts[0][1])) { $type = $default_resource; $name = $resource_name; } else { $type = $parts[0]; $name = $parts[1]; } } public static function getUniqueTemplateName($template, $template_resource) { self::parseResourceName($template_resource, $template->smarty->default_resource_type, $name, $type); $resource = Smarty_Resource::load($template->smarty, $type); $_file_is_dotted = $name[0] == '.' && ($name[1] == '.' || $name[1] == '/' || $name[1] == "\\"); if ($template instanceof Smarty_Internal_Template && $_file_is_dotted && ($template->source->type == 'file' || $template->parent->source->type == 'extends')) { $name = dirname($template->source->filepath) . DS . $name; } return $resource->buildUniqueResourceName($template->smarty, $name); } public static function source(Smarty_Internal_Template $_template = null, Smarty $smarty = null, $template_resource = null) { if ($_template) { $smarty = $_template->smarty; $template_resource = $_template->template_resource; } self::parseResourceName($template_resource, $smarty->default_resource_type, $name, $type); $resource = Smarty_Resource::load($smarty, $type); $_file_is_dotted = isset($name[0]) && $name[0] == '.' && ($name[1] == '.' || $name[1] == '/' || $name[1] == "\\"); if ($_file_is_dotted && isset($_template) && $_template->parent instanceof Smarty_Internal_Template && ($_template->parent->source->type == 'file' || $_template->parent->source->type == 'extends')) { $name2 = dirname($_template->parent->source->filepath) . DS . $name; } else { $name2 = $name; } $unique_resource_name = $resource->buildUniqueResourceName($smarty, $name2); $_cache_key = 'template|' . $unique_resource_name; if ($smarty->compile_id) { $_cache_key .= '|' . $smarty->compile_id; } if (isset(self::$sources[$_cache_key])) { return self::$sources[$_cache_key]; } $source = new Smarty_Template_Source($resource, $smarty, $template_resource, $type, $name, $unique_resource_name); $resource->populate($source, $_template); self::$sources[$_cache_key] = $source; return $source; } public static function config(Smarty_Internal_Config $_config) { static $_incompatible_resources = array('eval' => true, 'string' => true, 'extends' => true, 'php' => true); $config_resource = $_config->config_resource; $smarty = $_config->smarty; self::parseResourceName($config_resource, $smarty->default_config_type, $name, $type); if (isset($_incompatible_resources[$type])) { throw new SmartyException ("Unable to use resource '{$type}' for config"); } $resource = Smarty_Resource::load($smarty, $type); $unique_resource_name = $resource->buildUniqueResourceName($smarty, $name, true); $_cache_key = 'config|' . $unique_resource_name; if (isset(self::$sources[$_cache_key])) { return self::$sources[$_cache_key]; } $source = new Smarty_Config_Source($resource, $smarty, $config_resource, $type, $name, $unique_resource_name); $resource->populate($source, null); self::$sources[$_cache_key] = $source; return $source; } } class Smarty_Template_Source { public $compiler_class = null; public $template_lexer_class = null; public $template_parser_class = null; public $uid = null; public $resource = null; public $type = null; public $name = null; public $unique_resource = null; public $filepath = null; public $uncompiled = null; public $recompiled = null; public $components = null; public $handler = null; public $smarty = null; public function __construct(Smarty_Resource $handler, Smarty $smarty, $resource, $type, $name, $unique_resource) { $this->handler = $handler; $this->compiler_class = $handler->compiler_class; $this->template_lexer_class = $handler->template_lexer_class; $this->template_parser_class = $handler->template_parser_class; $this->uncompiled = $this->handler instanceof Smarty_Resource_Uncompiled; $this->recompiled = $this->handler instanceof Smarty_Resource_Recompiled; $this->smarty = $smarty; $this->resource = $resource; $this->type = $type; $this->name = $name; $this->unique_resource = $unique_resource; } public function getCompiled($_template) { $_cache_key = $this->unique_resource . '#' . $_template->compile_id; if (isset(Smarty_Resource::$compileds[$_cache_key])) { return Smarty_Resource::$compileds[$_cache_key]; } $compiled = new Smarty_Template_Compiled($this); $this->handler->populateCompiledFilepath($compiled, $_template); $compiled->timestamp = file_exists($compiled->filepath) ? filemtime($compiled->filepath) : 0; $compiled->exists = !!$compiled->timestamp; Smarty_Resource::$compileds[$_cache_key] = $compiled; return $compiled; } public function renderUncompiled(Smarty_Internal_Template $_template) { return $this->handler->renderUncompiled($this, $_template); } public function __set($property_name, $value) { switch ($property_name) { case 'timestamp': case 'exists': case 'content': case 'template': $this->$property_name = $value; break; default: throw new SmartyException("invalid source property '$property_name'."); } } public function __get($property_name) { switch ($property_name) { case 'timestamp': case 'exists': $this->handler->populateTimestamp($this); return $this->$property_name; case 'content': return $this->content = $this->handler->getContent($this); default: throw new SmartyException("source property '$property_name' does not exist."); } } } class Smarty_Template_Compiled { public $filepath = null; public $timestamp = null; public $exists = false; public $loaded = false; public $isCompiled = false; public $source = null; public $_properties = null; public function __construct(Smarty_Template_Source $source) { $this->source = $source; } }class Smarty_Internal_Resource_File extends Smarty_Resource { public function populate(Smarty_Template_Source $source, Smarty_Internal_Template $_template = null) { $source->filepath = $this->buildFilepath($source, $_template); if ($source->filepath !== false) { if (is_object($source->smarty->security_policy)) { $source->smarty->security_policy->isTrustedResourceDir($source->filepath); } $source->uid = sha1(realpath($source->filepath)); if ($source->smarty->compile_check && !isset($source->timestamp)) { $source->timestamp = file_exists($source->filepath)?filemtime($source->filepath):0; $source->exists = !!$source->timestamp; } } } public function populateTimestamp(Smarty_Template_Source $source) { $source->timestamp = file_exists($source->filepath)?filemtime($source->filepath):0; $source->exists = !!$source->timestamp; } public function getContent(Smarty_Template_Source $source) { if ($source->timestamp) { return file_get_contents($source->filepath); } if ($source instanceof Smarty_Config_Source) { throw new SmartyException("Unable to read config {$source->type} '{$source->name}'"); } throw new SmartyException("Unable to read template {$source->type} '{$source->name}'"); } public function getBasename(Smarty_Template_Source $source) { $_file = $source->name; if (($_pos = strpos($_file, ']')) !== false) { $_file = substr($_file, $_pos + 1); } return basename($_file); } }abstract class Smarty_CacheResource { public static $resources = array(); protected static $sysplugins = array( 'file' => true, ); abstract public function populate(Smarty_Template_Cached $cached, Smarty_Internal_Template $_template); abstract public function populateTimestamp(Smarty_Template_Cached $cached); abstract public function process(Smarty_Internal_Template $_template, Smarty_Template_Cached $cached = null); abstract public function writeCachedContent(Smarty_Internal_Template $_template, $content); public function getCachedContent(Smarty_Internal_Template $_template) { if ($_template->cached->handler->process($_template)) { ob_start(); $_template->properties['unifunc']($_template); return ob_get_clean(); } return null; } abstract public function clearAll(Smarty $smarty, $exp_time = null); abstract public function clear(Smarty $smarty, $resource_name, $cache_id, $compile_id, $exp_time); public function locked(Smarty $smarty, Smarty_Template_Cached $cached) { $start = microtime(true); $hadLock = null; while ($this->hasLock($smarty, $cached)) { $hadLock = true; if (microtime(true) - $start > $smarty->locking_timeout) { return false; } sleep(1); } return $hadLock; } public function hasLock(Smarty $smarty, Smarty_Template_Cached $cached) { return false; } public function acquireLock(Smarty $smarty, Smarty_Template_Cached $cached) { return true; } public function releaseLock(Smarty $smarty, Smarty_Template_Cached $cached) { return true; } public static function load(Smarty $smarty, $type = null) { if (!isset($type)) { $type = $smarty->caching_type; } if (isset($smarty->_cacheresource_handlers[$type])) { return $smarty->_cacheresource_handlers[$type]; } if (isset($smarty->registered_cache_resources[$type])) { return $smarty->_cacheresource_handlers[$type] = $smarty->registered_cache_resources[$type]; } if (isset(self::$sysplugins[$type])) { if (!isset(self::$resources[$type])) { $cache_resource_class = 'Smarty_Internal_CacheResource_' . ucfirst($type); self::$resources[$type] = new $cache_resource_class(); } return $smarty->_cacheresource_handlers[$type] = self::$resources[$type]; } $cache_resource_class = 'Smarty_CacheResource_' . ucfirst($type); if ($smarty->loadPlugin($cache_resource_class)) { if (!isset(self::$resources[$type])) { self::$resources[$type] = new $cache_resource_class(); } return $smarty->_cacheresource_handlers[$type] = self::$resources[$type]; } throw new SmartyException("Unable to load cache resource '{$type}'"); } public static function invalidLoadedCache(Smarty $smarty) { foreach ($smarty->template_objects as $tpl) { if (isset($tpl->cached)) { $tpl->cached->valid = false; $tpl->cached->processed = false; } } } } class Smarty_Template_Cached { public $filepath = false; public $content = null; public $timestamp = false; public $exists = false; public $valid = false; public $processed = false; public $handler = null; public $compile_id = null; public $cache_id = null; public $lock_id = null; public $is_locked = false; public $source = null; public function __construct(Smarty_Internal_Template $_template) { $this->compile_id = $_template->compile_id; $this->cache_id = $_template->cache_id; $this->source = $_template->source; $_template->cached = $this; $smarty = $_template->smarty; $this->handler = $handler = Smarty_CacheResource::load($smarty); if (!($_template->caching == Smarty::CACHING_LIFETIME_CURRENT || $_template->caching == Smarty::CACHING_LIFETIME_SAVED) || $_template->source->recompiled) { $handler->populate($this, $_template); return; } while (true) { while (true) { $handler->populate($this, $_template); if ($this->timestamp === false || $smarty->force_compile || $smarty->force_cache) { $this->valid = false; } else { $this->valid = true; } if ($this->valid && $_template->caching == Smarty::CACHING_LIFETIME_CURRENT && $_template->cache_lifetime >= 0 && time() > ($this->timestamp + $_template->cache_lifetime)) { $this->valid = false; } if ($this->valid || !$_template->smarty->cache_locking) { break; } if (!$this->handler->locked($_template->smarty, $this)) { $this->handler->acquireLock($_template->smarty, $this); break 2; } } if ($this->valid) { if (!$_template->smarty->cache_locking || $this->handler->locked($_template->smarty, $this) === null) { if ($smarty->debugging) { Smarty_Internal_Debug::start_cache($_template); } if ($handler->process($_template, $this) === false) { $this->valid = false; } else { $this->processed = true; } if ($smarty->debugging) { Smarty_Internal_Debug::end_cache($_template); } } else { continue; } } else { return; } if ($this->valid && $_template->caching === Smarty::CACHING_LIFETIME_SAVED && $_template->properties['cache_lifetime'] >= 0 && (time() > ($_template->cached->timestamp + $_template->properties['cache_lifetime']))) { $this->valid = false; } if (!$this->valid && $_template->smarty->cache_locking) { $this->handler->acquireLock($_template->smarty, $this); return; } else { return; } } } public function write(Smarty_Internal_Template $_template, $content) { if (!$_template->source->recompiled) { if ($this->handler->writeCachedContent($_template, $content)) { $this->content = null; $this->timestamp = time(); $this->exists = true; $this->valid = true; if ($_template->smarty->cache_locking) { $this->handler->releaseLock($_template->smarty, $this); } return true; } } return false; } }class Smarty_Internal_CacheResource_File extends Smarty_CacheResource { public function populate(Smarty_Template_Cached $cached, Smarty_Internal_Template $_template) { $_source_file_path = str_replace(':', '.', $_template->source->filepath); $_cache_id = isset($_template->cache_id) ? preg_replace('![^\w\|]+!', '_', $_template->cache_id) : null; $_compile_id = isset($_template->compile_id) ? preg_replace('![^\w\|]+!', '_', $_template->compile_id) : null; $_filepath = $_template->source->uid; if ($_template->smarty->use_sub_dirs) { $_filepath = substr($_filepath, 0, 2) . DS . substr($_filepath, 2, 2) . DS . substr($_filepath, 4, 2) . DS . $_filepath; } $_compile_dir_sep = $_template->smarty->use_sub_dirs ? DS : '^'; if (isset($_cache_id)) { $_cache_id = str_replace('|', $_compile_dir_sep, $_cache_id) . $_compile_dir_sep; } else { $_cache_id = ''; } if (isset($_compile_id)) { $_compile_id = $_compile_id . $_compile_dir_sep; } else { $_compile_id = ''; } $_cache_dir = $_template->smarty->getCacheDir(); if ($_template->smarty->cache_locking) { if (!preg_match('/^([\/\\\\]|[a-zA-Z]:[\/\\\\])/', $_cache_dir)) { $_lock_dir = rtrim(getcwd(), '/\\') . DS . $_cache_dir; } else { $_lock_dir = $_cache_dir; } $cached->lock_id = $_lock_dir . sha1($_cache_id . $_compile_id . $_template->source->uid) . '.lock'; } $cached->filepath = $_cache_dir . $_cache_id . $_compile_id . $_filepath . '.' . basename($_source_file_path) . '.php'; $cached->timestamp = file_exists($cached->filepath)?filemtime($cached->filepath):0; $cached->exists = !!$cached->timestamp; } public function populateTimestamp(Smarty_Template_Cached $cached) { $cached->timestamp = file_exists($cached->filepath)?filemtime($cached->filepath):0; $cached->exists = !!$cached->timestamp; } public function process(Smarty_Internal_Template $_template, Smarty_Template_Cached $cached = null) { $_smarty_tpl = $_template; return @include $_template->cached->filepath; } public function writeCachedContent(Smarty_Internal_Template $_template, $content) { if (Smarty_Internal_Write_File::writeFile($_template->cached->filepath, $content, $_template->smarty) === true) { $_template->cached->timestamp = file_exists($_template->cached->filepath)?filemtime($_template->cached->filepath):0; $_template->cached->exists = !!$_template->cached->timestamp; if ($_template->cached->exists) { return true; } } return false; } public function clearAll(Smarty $smarty, $exp_time = null) { return $this->clear($smarty, null, null, null, $exp_time); } public function clear(Smarty $smarty, $resource_name, $cache_id, $compile_id, $exp_time) { $_cache_id = isset($cache_id) ? preg_replace('![^\w\|]+!', '_', $cache_id) : null; $_compile_id = isset($compile_id) ? preg_replace('![^\w\|]+!', '_', $compile_id) : null; $_dir_sep = $smarty->use_sub_dirs ? '/' : '^'; $_compile_id_offset = $smarty->use_sub_dirs ? 3 : 0; $_dir = realpath($smarty->getCacheDir()) . '/'; $_dir_length = strlen($_dir); if (isset($_cache_id)) { $_cache_id_parts = explode('|', $_cache_id); $_cache_id_parts_count = count($_cache_id_parts); if ($smarty->use_sub_dirs) { foreach ($_cache_id_parts as $id_part) { $_dir .= $id_part . DS; } } } if (isset($resource_name)) { $_save_stat = $smarty->caching; $smarty->caching = true; $tpl = new $smarty->template_class($resource_name, $smarty); $smarty->caching = $_save_stat; $tpl->source; if ($smarty->allow_ambiguous_resources) { $_templateId = $tpl->source->unique_resource . $tpl->cache_id . $tpl->compile_id; } else { $_templateId = $smarty->joined_template_dir . '#' . $resource_name . $tpl->cache_id . $tpl->compile_id; } if (isset($_templateId[150])) { $_templateId = sha1($_templateId); } unset($smarty->template_objects[$_templateId]); if ($tpl->source->exists) { $_resourcename_parts = basename(str_replace('^', '/', $tpl->cached->filepath)); } else { return 0; } } $_count = 0; $_time = time(); if (file_exists($_dir)) { $_cacheDirs = new RecursiveDirectoryIterator($_dir); $_cache = new RecursiveIteratorIterator($_cacheDirs, RecursiveIteratorIterator::CHILD_FIRST); foreach ($_cache as $_file) { if (substr(basename($_file->getPathname()), 0, 1) == '.' || strpos($_file, '.svn') !== false) { continue; } if ($_file->isDir()) { if (!$_cache->isDot()) { @rmdir($_file->getPathname()); } } else { $_parts = explode($_dir_sep, str_replace('\\', '/', substr((string) $_file, $_dir_length))); $_parts_count = count($_parts); if (isset($resource_name)) { if ($_parts[$_parts_count - 1] != $_resourcename_parts) { continue; } } if (isset($_compile_id) && (!isset($_parts[$_parts_count - 2 - $_compile_id_offset]) || $_parts[$_parts_count - 2 - $_compile_id_offset] != $_compile_id)) { continue; } if (isset($_cache_id)) { $_parts_count = (isset($_compile_id)) ? $_parts_count - 2 - $_compile_id_offset : $_parts_count - 1 - $_compile_id_offset; if ($_parts_count < $_cache_id_parts_count) { continue; } for ($i = 0; $i < $_cache_id_parts_count; $i ++) { if ($_parts[$i] != $_cache_id_parts[$i]) { continue 2; } } } if (isset($exp_time)) { if ($exp_time < 0) { preg_match('#\'cache_lifetime\' =>\s*(\d*)#', file_get_contents($_file), $match); if ($_time < (filemtime($_file) + $match[1])) { continue; } } else { if ($_time - filemtime($_file) < $exp_time) { continue; } } } $_count += unlink((string) $_file) ? 1 : 0; } } } return $_count; } public function hasLock(Smarty $smarty, Smarty_Template_Cached $cached) { if (version_compare(PHP_VERSION, '5.3.0', '>=')) { clearstatcache(true, $cached->lock_id); } else { clearstatcache(); } $t = file_exists($cached->lock_id)?filemtime($cached->lock_id):0; return $t && (time() - $t < $smarty->locking_timeout); } public function acquireLock(Smarty $smarty, Smarty_Template_Cached $cached) { $cached->is_locked = true; touch($cached->lock_id); } public function releaseLock(Smarty $smarty, Smarty_Template_Cached $cached) { $cached->is_locked = false; unlink($cached->lock_id); } }